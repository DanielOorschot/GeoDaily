{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\QuizProject\\\\GeoDaily\\\\QuizProjectFrontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport countryJson from './countrydata.json';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const dateObj = new Date();\n  let date = new Date().toUTCString().slice(5, 16);\n  var todaysSeed = require('random-seed').create();\n  todaysSeed.seed(date);\n  var todaysNumber = todaysSeed(countryJson.length);\n  const [countryData, setCountryData] = useState(countryJson);\n  const blankCountry = {\n    name: '',\n    continent: '',\n    population: 0,\n    landArea: 0\n  };\n  const [guess, setGuess] = useState('');\n  const [guessData, setGuessData] = useState([blankCountry]);\n  const makeGuess = g => {\n    const found = countryData.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === g;\n    });\n    if (found) {\n      setGuessData([...guessData, found]);\n    }\n  };\n\n  /*\n    return (\n      <div className='container'>\n        <div className='center'>\n          <div>\n            {countryData[todaysNumber].name}\n          </div>\n  \n          <div>\n            <label>\n              Guess:\n              <input\n                onChange={e => setGuess(e.target.value)}\n              />\n              <button onClick={() => makeGuess(guess)}>\n                Make Guess\n              </button>\n            </label>\n          </div>\n          <div>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Continent</th>\n                  <th>Population</th>\n                  <th>Land Area</th>\n                </tr>\n              </thead>\n              <tbody>\n                {guessData.slice(1).map((item, i) => (<CountryLine guessInfo={item} correctInfo={countryData[todaysNumber]} />))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n    */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"animatedBackground\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SoLhKoSWqFbfHZzb8cz0K9m71e8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","countryJson","jsxDEV","_jsxDEV","App","_s","dateObj","Date","date","toUTCString","slice","todaysSeed","require","create","seed","todaysNumber","length","countryData","setCountryData","blankCountry","name","continent","population","landArea","guess","setGuess","guessData","setGuessData","makeGuess","g","found","find","_ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel/Desktop/QuizProject/GeoDaily/QuizProjectFrontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport countryJson from './countrydata.json';\nimport { Country } from './helpers/TypeInterfaces';\nimport CountryLine from './CountryLine';\nimport './App.scss'\n\nconst App = () => {\n\n  const dateObj = new Date();\n  let date = new Date().toUTCString().slice(5, 16);\n  var todaysSeed = require('random-seed').create();\n  todaysSeed.seed(date);\n  var todaysNumber = todaysSeed(countryJson.length);\n\n  const [countryData, setCountryData] = useState<Country[]>(countryJson);\n\n  const blankCountry: Country = {\n    name: '',\n    continent: '',\n    population: 0,\n    landArea: 0\n  }\n\n  const [guess, setGuess] = useState('');\n\n  const [guessData, setGuessData] = useState([blankCountry]);\n\n  const makeGuess = (g: string) => {\n    const found = countryData.find(({ name }) => name === g);\n    if (found) {\n      setGuessData([...guessData, found]);\n\n    }\n\n  }\n\n/*\n  return (\n    <div className='container'>\n      <div className='center'>\n        <div>\n          {countryData[todaysNumber].name}\n        </div>\n\n        <div>\n          <label>\n            Guess:\n            <input\n              onChange={e => setGuess(e.target.value)}\n            />\n            <button onClick={() => makeGuess(guess)}>\n              Make Guess\n            </button>\n          </label>\n        </div>\n        <div>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Continent</th>\n                <th>Population</th>\n                <th>Land Area</th>\n              </tr>\n            </thead>\n            <tbody>\n              {guessData.slice(1).map((item, i) => (<CountryLine guessInfo={item} correctInfo={countryData[todaysNumber]} />))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n  */\n\n  return (\n    <div className='animatedBackground'>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAElD,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,oBAAoB;AAG5C,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC1B,IAAIC,IAAI,GAAG,IAAID,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAChD,IAAIC,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM,CAAC,CAAC;EAChDF,UAAU,CAACG,IAAI,CAACN,IAAI,CAAC;EACrB,IAAIO,YAAY,GAAGJ,UAAU,CAACV,WAAW,CAACe,MAAM,CAAC;EAEjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAYC,WAAW,CAAC;EAEtE,MAAMkB,YAAqB,GAAG;IAC5BC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,CAACmB,YAAY,CAAC,CAAC;EAE1D,MAAMS,SAAS,GAAIC,CAAS,IAAK;IAC/B,MAAMC,KAAK,GAAGb,WAAW,CAACc,IAAI,CAACC,IAAA;MAAA,IAAC;QAAEZ;MAAK,CAAC,GAAAY,IAAA;MAAA,OAAKZ,IAAI,KAAKS,CAAC;IAAA,EAAC;IACxD,IAAIC,KAAK,EAAE;MACTH,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEI,KAAK,CAAC,CAAC;IAErC;EAEF,CAAC;;EAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,oBACE3B,OAAA;IAAK8B,SAAS,EAAC;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV,CAAC;AAAAhC,EAAA,CAzEKD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA2ET,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}