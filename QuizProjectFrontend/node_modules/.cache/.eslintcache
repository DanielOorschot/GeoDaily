[{"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\index.tsx":"1","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\App.tsx":"3","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\CountryLine.tsx":"4","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\Components\\Navbar.tsx":"5"},{"size":554,"mtime":1685663181456,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1685663180628,"results":"8","hashOfConfig":"7"},{"size":2332,"mtime":1694666645394,"results":"9","hashOfConfig":"7"},{"size":5746,"mtime":1691201289125,"results":"10","hashOfConfig":"7"},{"size":454,"mtime":1694658813338,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7wt768",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\index.tsx",[],[],"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\App.tsx",["28","29","30","31","32"],[],"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\CountryLine.tsx",["33","34","35","36","37","38"],[],"import { JSXElementConstructor, ReactElement, ReactFragment } from \"react\";\r\nimport { JSX } from \"react/jsx-runtime\";\r\nimport { Country } from \"./helpers/TypeInterfaces\"\r\nimport { BsFillArrowUpSquareFill, BsFillArrowDownSquareFill } from \"react-icons/bs\";\r\nimport './CountryLine.scss';\r\nimport { setMaxIdleHTTPParsers } from \"http\";\r\nimport { scryRenderedDOMComponentsWithClass } from \"react-dom/test-utils\";\r\n\r\ninterface CountryLineProps {\r\n    guessInfo: Country;\r\n    correctInfo: Country;\r\n}\r\n\r\nvar populationLine;\r\nvar landAreaLine;\r\nvar continentLine;\r\nvar flagColoursLine = <div></div>;\r\nconst CountryLine = ({ guessInfo, correctInfo }: CountryLineProps) => {\r\n\r\n    //Population Check\r\n    if (guessInfo.population > correctInfo.population) {\r\n        populationLine = <div className='CountryLine-incorrect'>{guessInfo.population.toLocaleString()}<BsFillArrowDownSquareFill /></div>;\r\n    }\r\n    else if (guessInfo.population < correctInfo.population) {\r\n        populationLine = <div className='CountryLine-incorrect'>{guessInfo.population.toLocaleString()}<BsFillArrowUpSquareFill /></div>;\r\n    }\r\n    else {\r\n        populationLine = <div className='CountryLine-correct'>{guessInfo.population.toLocaleString()}</div>;\r\n    }\r\n\r\n    //Land area check\r\n    if (guessInfo.landArea > correctInfo.landArea) {\r\n        landAreaLine = <div className='CountryLine-incorrect'>{guessInfo.landArea.toLocaleString()}<BsFillArrowDownSquareFill /></div>;\r\n    }\r\n    else if (guessInfo.landArea < correctInfo.landArea) {\r\n        landAreaLine = <div className='CountryLine-incorrect'>{guessInfo.landArea.toLocaleString()}<BsFillArrowUpSquareFill /></div>;\r\n    }\r\n    else {\r\n        landAreaLine = <div className='CountryLine-correct'>{guessInfo.landArea.toLocaleString()}</div>;\r\n    }\r\n\r\n    //Continent Check\r\n    //check if guess country is single continent\r\n    if (typeof (guessInfo.continent) === \"string\") {\r\n        if (typeof (correctInfo.continent) === \"string\") {\r\n            //Logic if both are strings\r\n            if (guessInfo.continent === correctInfo.continent) {\r\n                continentLine = <div className='CountryLine-correct'>{guessInfo.continent}</div>;\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent}</div>;\r\n            }\r\n        }\r\n        else {\r\n            //logic if the correct answer is transcontinental but guess is not\r\n            if (guessInfo.continent === correctInfo.continent[0] || guessInfo.continent === correctInfo.continent[1]) {\r\n                continentLine = <div className='CountryLine-partcorrect'>{guessInfo.continent}</div>;\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent}</div>;\r\n            }\r\n        }\r\n    }\r\n    //logic if the guess if is transcontinental\r\n    else {\r\n        if (typeof (correctInfo.continent) === \"string\") {\r\n            if (guessInfo.continent[0] === correctInfo.continent || guessInfo.continent[1] === correctInfo.continent) {\r\n                continentLine = <div className=\"CountryLine-partcorrect\">{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n        }\r\n        //logic if both are transcontinental\r\n        else {\r\n            var count = 0;\r\n            for (const continent of guessInfo.continent) {\r\n                if (correctInfo.continent.includes(continent)) {\r\n                    count += 1;\r\n                }\r\n            }\r\n            if (count === 2) {\r\n                continentLine = <div className=\"CountryLine-correct\">{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n            else if (count === 1) {\r\n                continentLine = <div className=\"CountryLine-partcorrect\">{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n            else {\r\n                continentLine = <div className=\"CountryLine-incorrect\">{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n        }\r\n    }\r\n\r\n    const flagColourIntersection = (gFlagColours: string[], cFlagColours: string[]) => {\r\n        const intersection: string[] = [];\r\n        for (const colour of cFlagColours) {\r\n            if (gFlagColours.includes(colour)) {\r\n                intersection.push(colour);\r\n            }\r\n        }\r\n        return intersection;\r\n    }\r\n\r\n    const checkFlagColours = flagColourIntersection(guessInfo.flagColours, correctInfo.flagColours);\r\n    if (checkFlagColours.length === 0) {\r\n        flagColoursLine = <div className=\"CountryLine-incorrect\">{guessInfo.flagColours}</div>;\r\n\r\n    }\r\n    else if ((checkFlagColours.length < correctInfo.flagColours.length) || (checkFlagColours.length < guessInfo.flagColours.length)) {\r\n        flagColoursLine = <div className=\"CountryLine-partcorrect\">{guessInfo.flagColours}</div>;\r\n    }\r\n    \r\n    else if ((checkFlagColours.length === correctInfo.flagColours.length) && (checkFlagColours.length === guessInfo.flagColours.length)) {\r\n        flagColoursLine = <div className=\"CountryLine-correct\">{guessInfo.flagColours}</div>;\r\n    }\r\n\r\n//case where there is correct number of colours, only case that can be correct\r\n\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <tr>\r\n        <td>\r\n            {guessInfo.name}\r\n        </td>\r\n        <td>\r\n            {continentLine}\r\n        </td>\r\n        <td>\r\n            {populationLine}\r\n        </td>\r\n        <td>\r\n            {landAreaLine}\r\n        </td>\r\n        <td>\r\n            {flagColoursLine}\r\n        </td>\r\n    </tr>\r\n)\r\n};\r\n\r\nexport default CountryLine;","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\Components\\Navbar.tsx",[],[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":26},{"ruleId":"39","severity":1,"message":"43","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":12},{"ruleId":"39","severity":1,"message":"44","line":8,"column":8,"nodeType":"41","messageId":"42","endLine":8,"endColumn":14},{"ruleId":"39","severity":1,"message":"45","line":12,"column":9,"nodeType":"41","messageId":"42","endLine":12,"endColumn":16},{"ruleId":"39","severity":1,"message":"46","line":18,"column":23,"nodeType":"41","messageId":"42","endLine":18,"endColumn":37},{"ruleId":"39","severity":1,"message":"47","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":31},{"ruleId":"39","severity":1,"message":"48","line":1,"column":33,"nodeType":"41","messageId":"42","endLine":1,"endColumn":45},{"ruleId":"39","severity":1,"message":"49","line":1,"column":47,"nodeType":"41","messageId":"42","endLine":1,"endColumn":60},{"ruleId":"39","severity":1,"message":"50","line":2,"column":10,"nodeType":"41","messageId":"42","endLine":2,"endColumn":13},{"ruleId":"39","severity":1,"message":"51","line":6,"column":10,"nodeType":"41","messageId":"42","endLine":6,"endColumn":31},{"ruleId":"39","severity":1,"message":"52","line":7,"column":10,"nodeType":"41","messageId":"42","endLine":7,"endColumn":44},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Navbar' is defined but never used.","'dateObj' is assigned a value but never used.","'setCountryData' is assigned a value but never used.","'JSXElementConstructor' is defined but never used.","'ReactElement' is defined but never used.","'ReactFragment' is defined but never used.","'JSX' is defined but never used.","'setMaxIdleHTTPParsers' is defined but never used.","'scryRenderedDOMComponentsWithClass' is defined but never used."]