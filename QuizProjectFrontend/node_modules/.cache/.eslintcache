[{"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\index.tsx":"1","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\App.tsx":"3","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\CountryLine.tsx":"4"},{"size":554,"mtime":1685663181456,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1685663180628,"results":"7","hashOfConfig":"6"},{"size":1740,"mtime":1687262592129,"results":"8","hashOfConfig":"6"},{"size":3369,"mtime":1687251045088,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1qzruf",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\index.tsx",[],[],[],"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\App.tsx",["25","26","27","28"],[],"import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport countryJson from './countrydata.json';\nimport { Country } from './helpers/TypeInterfaces';\nimport CountryLine from './CountryLine';\n\nconst App = () => {\n\n  const dateObj = new Date();\n  let date = new Date().toUTCString().slice(5, 16);\n  var todaysSeed = require('random-seed').create();\n  todaysSeed.seed(date);\n  var todaysNumber = todaysSeed(countryJson.length);\n\n  const [countryData, setCountryData] = useState<Country[]>(countryJson);\n\n  const blankCountry: Country = {\n    name: '',\n    continent: '',\n    population: 0,\n    landArea: 0\n  }\n\n  const [guess, setGuess] = useState('');\n\n  const [guessData, setGuessData] = useState([blankCountry]);\n\n  const makeGuess = (g: string) => {\n    const found = countryData.find(({ name }) => name === g);\n    if (found) {\n      setGuessData([...guessData, found]);\n\n    }\n\n  }\n\n\n  return (\n    <div>\n      <div>\n        {countryData[todaysNumber].name}\n      </div>\n\n      <div>\n        <label>\n          Guess:\n          <input\n            onChange={e => setGuess(e.target.value)}\n          />\n          <button onClick={() => makeGuess(guess)}>\n            Make Guess\n          </button>\n        </label>\n      </div>\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Continent</th>\n              <th>Population</th>\n              <th>Land Area</th>\n            </tr>\n          </thead>\n          <tbody>\n            {guessData.slice(1).map((item, i) => (<CountryLine guessInfo={item} correctInfo={countryData[todaysNumber]} />))}\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Daniel\\Desktop\\QuizProject\\GeoDaily\\QuizProjectFrontend\\src\\CountryLine.tsx",["29","30"],[],"import { ReactFragment } from \"react\";\r\nimport { JSX } from \"react/jsx-runtime\";\r\nimport { Country } from \"./helpers/TypeInterfaces\"\r\nimport { BsFillArrowUpSquareFill, BsFillArrowDownSquareFill } from \"react-icons/bs\";\r\nimport './CountryLine.scss';\r\n\r\ninterface CountryLineProps {\r\n    guessInfo: Country;\r\n    correctInfo: Country;\r\n}\r\n\r\nvar populationLine;\r\nvar landAreaLine;\r\nvar continentLine;\r\n\r\nconst CountryLine = ({ guessInfo, correctInfo }: CountryLineProps) => {\r\n\r\n    if (guessInfo.population > correctInfo.population) {\r\n        populationLine = <div className='CountryLine-incorrect'>{guessInfo.population.toLocaleString()}<BsFillArrowDownSquareFill /></div>;\r\n    }\r\n    else if (guessInfo.population < correctInfo.population) {\r\n        populationLine = <div className='CountryLine-incorrect'>{guessInfo.population.toLocaleString()}<BsFillArrowUpSquareFill /></div>;\r\n    }\r\n    else {\r\n        populationLine = <div className='CountryLine-correct'>{guessInfo.population.toLocaleString()}</div>;\r\n    }\r\n\r\n    if (guessInfo.landArea > correctInfo.landArea) {\r\n        landAreaLine = <div className='CountryLine-incorrect'>{guessInfo.landArea.toLocaleString()}<BsFillArrowDownSquareFill /></div>;\r\n    }\r\n    else if (guessInfo.landArea < correctInfo.landArea) {\r\n        landAreaLine = <div className='CountryLine-incorrect'>{guessInfo.landArea.toLocaleString()}<BsFillArrowUpSquareFill /></div>;\r\n    }\r\n    else {\r\n        landAreaLine = <div className='CountryLine-correct'>{guessInfo.landArea.toLocaleString()}</div>;\r\n    }\r\n\r\n    if (typeof (guessInfo.continent) === \"string\") {\r\n        if (typeof (correctInfo.continent) === \"string\") {\r\n            if (guessInfo.continent === correctInfo.continent) {\r\n                continentLine = <div className='CountryLine-correct'>{guessInfo.continent}</div>;\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent}</div>;\r\n            }\r\n        }\r\n        else {\r\n            if (guessInfo.continent === correctInfo.continent[0] || guessInfo.continent === correctInfo.continent[1]) {\r\n                continentLine = <div className='CountryLine-partcorrect'>{guessInfo.continent}</div>;\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent}</div>;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (typeof (correctInfo.continent) === \"string\") {\r\n            if (guessInfo.continent[0] === correctInfo.continent || guessInfo.continent[1] === correctInfo.continent) {\r\n                continentLine = <div className=\"CountryLine-partcorrect\">{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n            else {\r\n                continentLine = <div className='CountryLine-incorrect'>{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n            }\r\n        }\r\n        continentLine = <div>{guessInfo.continent[0]}-{guessInfo.continent[1]}</div>\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {guessInfo.name}\r\n            </td>\r\n            <td>\r\n                {continentLine}\r\n            </td>\r\n            <td>\r\n                {populationLine}\r\n            </td>\r\n            <td>\r\n                {landAreaLine}\r\n            </td>\r\n        </tr>\r\n    )\r\n};\r\n\r\nexport default CountryLine;",{"ruleId":"31","severity":1,"message":"32","line":1,"column":17,"nodeType":"33","messageId":"34","endLine":1,"endColumn":26},{"ruleId":"31","severity":1,"message":"35","line":2,"column":8,"nodeType":"33","messageId":"34","endLine":2,"endColumn":12},{"ruleId":"31","severity":1,"message":"36","line":10,"column":9,"nodeType":"33","messageId":"34","endLine":10,"endColumn":16},{"ruleId":"31","severity":1,"message":"37","line":16,"column":23,"nodeType":"33","messageId":"34","endLine":16,"endColumn":37},{"ruleId":"31","severity":1,"message":"38","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":23},{"ruleId":"31","severity":1,"message":"39","line":2,"column":10,"nodeType":"33","messageId":"34","endLine":2,"endColumn":13},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'dateObj' is assigned a value but never used.","'setCountryData' is assigned a value but never used.","'ReactFragment' is defined but never used.","'JSX' is defined but never used."]